const { SpeechClient } = require('@google-cloud/speech');
const fs = require('fs');
const path = require('path');
const ffmpeg = require('fluent-ffmpeg');
const OpenAI = require('openai');

// Keep these imports for future use when integrating real services
// Initialize Google Speech-to-Text client (keep this for future use)
/* 
const speechClient = new SpeechClient({
  keyFilename: path.join(__dirname, '../config/google_credentials.json')
});
*/

// Initialize OpenAI API client (keep this for future use)
/*
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});
*/

// Function to convert video to audio if needed (keep this for future use)
const convertVideoToAudio = (videoPath) => {
  return new Promise((resolve, reject) => {
    const audioPath = videoPath.replace(/\.[^/.]+$/, '.wav');
    
    ffmpeg(videoPath)
      .output(audioPath)
      .audioCodec('pcm_s16le')
      .toFormat('wav')
      .on('end', () => resolve(audioPath))
      .on('error', (err) => reject(err))
      .run();
  });
};

// MOCK: Temporary mock function for transcription
const transcribeAudio = async (filePath) => {
  console.log(`[MOCK] Transcribing file: ${filePath}`);
  
  try {
    // Just log the file info for debugging
    const fileExt = path.extname(filePath).toLowerCase();
    const stats = fs.statSync(filePath);
    const fileSizeMB = (stats.size / (1024 * 1024)).toFixed(2);
    
    console.log(`File details - Type: ${fileExt}, Size: ${fileSizeMB} MB`);
    
    // Return mock transcription
    return `This is a mock transcription for the file "${path.basename(filePath)}".
    
In a real implementation, this would contain the actual text content from your audio or video file.

The transcription would include all the spoken content, properly formatted with punctuation and paragraphs.

Some key points from this lecture might include:
- Important concept #1: Educational technology can transform learning
- Important concept #2: Speech-to-text technology has many applications
- Important concept #3: Flashcards are an effective study method
- Important concept #4: AI can help identify key information from lectures
    
This mock transcription is approximately the length and format you would expect from a real transcription service.`;
  } catch (error) {
    console.error('Mock transcription error:', error);
    throw new Error('Error in mock transcription: ' + error.message);
  }
};

// MOCK: Function to generate flashcards without using OpenAI API
const generateFlashcards = async (transcription) => {
  console.log("[MOCK] Generating flashcards from transcription");
  
  try {
    // Create mock flashcards based on the transcription
    // In a real implementation, these would be generated by AI
    return [
      { 
        "question": "What is the main benefit of educational technology?", 
        "answer": "Educational technology can transform learning by making it more accessible, engaging, and personalized."
      },
      { 
        "question": "How does speech-to-text technology work?", 
        "answer": "It uses machine learning algorithms to convert spoken language into written text by analyzing audio patterns and matching them to known words and phrases."
      },
      { 
        "question": "Why are flashcards an effective study method?", 
        "answer": "Flashcards utilize the principles of active recall and spaced repetition, which are proven to enhance long-term memory retention."
      },
      { 
        "question": "What role does AI play in educational tools?", 
        "answer": "AI can help identify key information from lectures, personalize learning experiences, and automate tasks like summarization and question generation."
      },
      { 
        "question": "What are the components of this application?", 
        "answer": "The application includes file upload functionality, transcription processing, flashcard generation, and an interactive user interface."
      },
      { 
        "question": "How is the file upload handled in this system?", 
        "answer": "Files are uploaded through a user-friendly interface, processed securely on the server using Multer, and then passed to transcription services."
      },
      { 
        "question": "What technologies power the frontend of this application?", 
        "answer": "The frontend is built with React.js and styled using Tailwind CSS for a responsive and modern user interface."
      },
      { 
        "question": "What is the backend technology stack?", 
        "answer": "The backend uses Node.js with Express.js for the server, with additional services for speech processing and AI analysis."
      },
      { 
        "question": "How is the transcription data stored?", 
        "answer": "Currently the transcription is processed in memory and returned to the client, but could be extended to use database storage for persistence."
      },
      { 
        "question": "What makes this application useful for students?", 
        "answer": "It automates the process of extracting key information from lectures, saving time and helping students focus on the most important concepts to study."
      }
    ];
  } catch (error) {
    console.error('Mock flashcard generation error:', error);
    throw new Error('Error in mock flashcard generation: ' + error.message);
  }
};

module.exports = {
  transcribeAudio,
  generateFlashcards
};











/*const { SpeechClient } = require('@google-cloud/speech');
const fs = require('fs');
const path = require('path');
const ffmpeg = require('fluent-ffmpeg');
const OpenAI = require('openai'); // Keep this import

// Initialize Google Speech-to-Text client
const speechClient = new SpeechClient({
  keyFilename: path.join(__dirname, '../config/google_credentials.json')
});

// Initialize OpenAI API client - this won't make API calls unless methods are called
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Function to convert video to audio if needed
const convertVideoToAudio = (videoPath) => {
  return new Promise((resolve, reject) => {
    const audioPath = videoPath.replace(/\.[^/.]+$/, '.wav');
    
    ffmpeg(videoPath)
      .output(audioPath)
      .audioCodec('pcm_s16le')
      .toFormat('wav')
      .on('end', () => resolve(audioPath))
      .on('error', (err) => reject(err))
      .run();
  });
};

// Function to transcribe audio file
const transcribeAudio = async (filePath) => {
  try {
    // Check if the file is video, convert to audio if needed
    const fileExt = path.extname(filePath).toLowerCase();
    const isVideo = ['.mp4', '.mpeg', '.webm'].includes(fileExt);
    
    let audioPath = filePath;
    if (isVideo) {
      audioPath = await convertVideoToAudio(filePath);
    }
    
    // Read the audio file
    const audioBytes = fs.readFileSync(audioPath);
    const audio = {
      content: audioBytes.toString('base64')
    };
    
    // Configure the request
    const config = {
      encoding: 'LINEAR16',
      sampleRateHertz: 16000,
      languageCode: 'en-US',
      enableAutomaticPunctuation: true,
      model: 'latest_long'
    };
    
    const request = {
      audio: audio,
      config: config
    };
    
    // Make the request
    const [response] = await speechClient.recognize(request);
    const transcription = response.results
      .map(result => result.alternatives[0].transcript)
      .join('\n');
    
    // Clean up temporary audio file if it was converted
    if (isVideo && audioPath !== filePath) {
      fs.unlinkSync(audioPath);
    }
    
    return transcription;
    
  } catch (error) {
    console.error('Transcription error:', error);
    throw error;
  }
};

// MODIFIED: Function to generate flashcards without using OpenAI API
const generateFlashcards = async (transcription) => {
  console.log("Using mock flashcards - OpenAI API credits not available");
  
  // Try to extract some words from the transcription to make flashcards more relevant
  const words = transcription.split(/\s+/).filter(word => word.length > 5);
  const randomWords = [];
  
  // Get some random words from the transcription if available
  if (words.length > 10) {
    for (let i = 0; i < 5; i++) {
      const randomIndex = Math.floor(Math.random() * words.length);
      randomWords.push(words[randomIndex]);
    }
  }
  
  // Create mock flashcards that appear to be related to the transcription
  return [
    { 
      "question": "What is the main topic of this lecture?", 
      "answer": `The lecture focuses on ${randomWords[0] || 'educational technology'} and related concepts.` 
    },
    { 
      "question": `How does ${randomWords[1] || 'transcription technology'} work?`, 
      "answer": "It converts spoken words to text through advanced speech recognition algorithms." 
    },
    { 
      "question": `What are the benefits of ${randomWords[2] || 'this approach'}?`, 
      "answer": "It improves efficiency, accuracy, and provides better learning outcomes." 
    },
    { 
      "question": `Define ${randomWords[3] || 'the key concept'} mentioned in the lecture.`, 
      "answer": `It refers to a fundamental principle that helps understand the subject matter.` 
    },
    { 
      "question": `How does ${randomWords[4] || 'the application'} handle data processing?`, 
      "answer": "Through a series of steps including collection, analysis, and transformation." 
    },
    { 
      "question": "What technologies are used in this process?", 
      "answer": "Speech recognition, natural language processing, and machine learning algorithms." 
    },
    { 
      "question": "Why is this topic important?", 
      "answer": "It has significant implications for education, research, and practical applications." 
    },
    { 
      "question": "What are the limitations of this approach?", 
      "answer": "It may face challenges with accuracy, processing speed, and handling specialized terminology." 
    },
    { 
      "question": "How might this technology evolve in the future?", 
      "answer": "It will likely incorporate more advanced AI capabilities and broader language support." 
    },
    { 
      "question": "What skills are needed to work with these technologies?", 
      "answer": "Programming knowledge, understanding of machine learning, and domain expertise." 
    }
  ];
};

module.exports = {
  transcribeAudio,
  generateFlashcards
}; */